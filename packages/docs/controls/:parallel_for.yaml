# Copyright 2020-2024 Lowdefy, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# TODO
_ref:
  path: templates/controls.yaml.njk
  vars:
    pageId: :parallel_for
    pageTitle: :parallel_for
    filePath: controls/:parallel_for.yaml
    types: |
      ```
      ({:parallel_for: string, :in: any[], :do: routine}): void
      ```
    description: |
      The `:parallel_for` control implements a parallel for loop within a routine.
      The routine defined by the `:do` key is executed for each item within the array defined by the `:in` key. This routine is executed for each item in the array in parallel.
      The value of the current array item can be accessed using the `_item` operator with the item key set by the `:parallel_for` key. This operator is only available within the `:for` and `:parallel_for` controls.
    controlKeys: |
      - `:parallel_for: string`: __Required__ - Used to define the key that can be used to access the value of the array item of the executing iteration.
      - `:in: any`: __Required__ - Used to define the array of data to iterate over.
      - `:do: routine`: __Required__ - Used to define the routine that will be executed for each array item in parallel.
    examples: |
      ###### Example
