# Copyright 2020-2024 Lowdefy, Inc

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

_ref:
  path: templates/operators.yaml.njk
  transformer: templates/operatorsMethodTransformer.js
  vars:
    pageId: _jsonata
    pageTitle: _jsonata
    filePath: operators/_jsonata.yaml
    description: |
      The `_jsonata` operator provides a powerful query and transformation language for JSON data using the [JSONata](https://jsonata.org) library.
    methods:
      - name: evaluate
        types: |
          ```
          ({on: any, expr: string, bindings?: object}): any
          ([on: any, expr: string, bindings?: object]): any
          ```
        description: |
          The `_jsonata.evaluate` method evaluates a JSONata expression against input data. JSONata is a lightweight query and transformation language for JSON data that allows you to navigate, query, and transform JSON structures with simple and intuitive expressions.
        arguments: |
          ###### object
            - `on: any`: The input data to evaluate the expression against.
            - `expr: string`: A JSONata expression string.
            - `bindings?: object`: Optional bindings object to provide additional variables to the expression.
        examples: |
          ###### Basic arithmetic:
          ```yaml
          _jsonata.evaluate:
            on:
              a: 5
              b: 3
            expr: a + b
          ```
          Returns: `8`

          ###### String concatenation:
          ```yaml
          _jsonata.evaluate:
            on:
              firstName: John
              lastName: Doe
            expr: firstName & " " & lastName
          ```
          Returns: `"John Doe"`

          ###### Array filtering:
          ```yaml
          _jsonata.evaluate:
            on:
              items: [1, 2, 3, 4, 5]
            expr: items[$ > 3]
          ```
          Returns: `[4, 5]`

          ###### Array mapping:
          ```yaml
          _jsonata.evaluate:
            on:
              users:
                - name: Alice
                  age: 30
                - name: Bob
                  age: 25
            expr: users.name
          ```
          Returns: `["Alice", "Bob"]`

          ###### Using bindings:
          ```yaml
          _jsonata.evaluate:
            on:
              price: 100
            expr: price * taxRate
            bindings:
              taxRate: 1.2
          ```
          Returns: `120`

          ###### Aggregation with built-in functions:
          ```yaml
          _jsonata.evaluate:
            on:
              items: [1, 2, 3, 4, 5]
            expr: $sum(items)
          ```
          Returns: `15`

          ###### Conditional expression:
          ```yaml
          _jsonata.evaluate:
            on:
              temperature: 25
            expr: temperature > 20 ? "warm" : "cold"
          ```
          Returns: `"warm"`

      - name: transform
        types: |
          ```
          ({on: any, expr: string, bindings?: object}): any
          ([on: any, expr: string, bindings?: object]): any
          ```
        description: |
          The `_jsonata.transform` method transforms data using a JSONata expression. This is functionally equivalent to `_jsonata.evaluate` but semantically indicates data transformation rather than simple evaluation.
        arguments: |
          ###### object
            - `on: any`: The input data to transform.
            - `expr: string`: A JSONata transformation expression string.
            - `bindings?: object`: Optional bindings object to provide additional variables to the expression.
        examples: |
          ###### Object transformation:
          ```yaml
          _jsonata.transform:
            on:
              user:
                firstName: Jane
                lastName: Smith
                email: jane@example.com
            expr: |
              {
                "fullName": user.firstName & " " & user.lastName,
                "contact": user.email
              }
          ```
          Returns:
          ```json
          {
            "fullName": "Jane Smith",
            "contact": "jane@example.com"
          }
          ```

          ###### Array transformation:
          ```yaml
          _jsonata.transform:
            on:
              orders:
                - id: 1
                  amount: 100
                - id: 2
                  amount: 200
            expr: orders.{ "orderId": id, "total": amount * 1.1 }
          ```
          Returns:
          ```json
          [
            { "orderId": 1, "total": 110 },
            { "orderId": 2, "total": 220 }
          ]
          ```

          ###### Complex transformation with aggregation:
          ```yaml
          _jsonata.transform:
            on:
              user:
                firstName: Jane
                lastName: Smith
              orders:
                - total: 100
                - total: 200
            expr: |
              {
                "customer": user.firstName & " " & user.lastName,
                "totalSpent": $sum(orders.total)
              }
          ```
          Returns:
          ```json
          {
            "customer": "Jane Smith",
            "totalSpent": 300
          }
          ```
